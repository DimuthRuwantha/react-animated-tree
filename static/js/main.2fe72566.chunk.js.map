{"version":3,"sources":["logo.svg","../../src/icons.js","../../src/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EyeO","props","viewBox","d","styles","position","padding","textOverflow","whiteSpace","verticalAlign","width","height","marginRight","cursor","textTransform","fontFamily","fontSize","willChange","marginLeft","borderLeft","Contents","children","style","Tree","state","open","visible","immediate","id","toggleImmediate","UNSAFE_componentWillReceiveProps","this","reduce","render","content","type","canHide","springConfig","Icon","Icons","className","opacity","onClick","toggle","toggleVisibility","onNodeClick","native","config","duration","from","transform","to","React","PureComponent","defaultProps","propTypes","PropTypes","func","App","nodeClicked","e","console","log","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2fe72566.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react'\r\n\r\nconst MinusSquareO = props => (\r\n  <svg {...props} viewBox=\"64 -65 897 897\">\r\n    <g>\r\n      <path\r\n        d=\"M888 760v0v0v-753v0h-752v0v753v0h752zM888 832h-752q-30 0 -51 -21t-21 -51v-753q0 -29 21 -50.5t51 -21.5h753q29 0 50.5 21.5t21.5 50.5v753q0 30 -21.5 51t-51.5 21v0zM732 347h-442q-14 0 -25 10.5t-11 25.5v0q0 15 11 25.5t25 10.5h442q14 0 25 -10.5t11 -25.5v0\r\n  q0 -15 -11 -25.5t-25 -10.5z\"\r\n      />\r\n    </g>\r\n  </svg>\r\n)\r\n\r\nconst PlusSquareO = props => (\r\n  <svg {...props} viewBox=\"64 -65 897 897\">\r\n    <g>\r\n      <path\r\n        d=\"M888 760v0v0v-753v0h-752v0v753v0h752zM888 832h-752q-30 0 -51 -21t-21 -51v-753q0 -29 21 -50.5t51 -21.5h753q29 0 50.5 21.5t21.5 50.5v753q0 30 -21.5 51t-51.5 21v0zM732 420h-184v183q0 15 -10.5 25.5t-25.5 10.5v0q-14 0 -25 -10.5t-11 -25.5v-183h-184\r\n  q-15 0 -25.5 -11t-10.5 -25v0q0 -15 10.5 -25.5t25.5 -10.5h184v-183q0 -15 11 -25.5t25 -10.5v0q15 0 25.5 10.5t10.5 25.5v183h184q15 0 25.5 10.5t10.5 25.5v0q0 14 -10.5 25t-25.5 11z\"\r\n      />\r\n    </g>\r\n  </svg>\r\n)\r\n\r\nconst EyeO = props => (\r\n  <svg {...props} viewBox=\"61 51 902 666\">\r\n    <g>\r\n      <path\r\n        d=\"M963 384q0 14 -21 62q-26 65 -61 109q-57 71 -139 112q-99 50 -230 50t-231 -50q-80 -41 -138 -112q-34 -43 -61 -109q-21 -48 -21 -62v0v0v0v0q0 -14 21 -62q27 -66 61 -109q57 -71 139 -112q100 -50 230 -50t230 50q81 41 139 112q35 44 62 109q20 48 20 62v0v0v0v0z\r\n  M889 384q-25 -77 -64 -126h-1q-46 -59 -114 -93q-85 -42 -198.5 -42t-198.5 42q-67 34 -114 93q-40 49 -65 126q25 77 65 126q47 59 114 93q85 43 199 43t198 -43q67 -33 114 -93q40 -49 65 -126zM512 558q-72 0 -122.5 -50.5t-50.5 -122.5t50.5 -122.5t122.5 -50.5\r\n  t122.5 50.5t50.5 122.5t-50.5 122.5t-122.5 50.5zM614 385q0 -42 -30 -72t-72 -30t-72 30t-30 72t30 72t72 30t72 -30t30 -72z\"\r\n      />\r\n    </g>\r\n  </svg>\r\n)\r\n\r\nconst CloseSquareO = props => (\r\n  <svg {...props} viewBox=\"64 -65 897 897\">\r\n    <g>\r\n      <path\r\n        d=\"M717.5 589.5q-10.5 10.5 -25.5 10.5t-26 -10l-154 -155l-154 155q-11 10 -26 10t-25.5 -10.5t-10.5 -25.5t11 -25l154 -155l-154 -155q-11 -10 -11 -25t10.5 -25.5t25.5 -10.5t26 10l154 155l154 -155q11 -10 26 -10t25.5 10.5t10.5 25t-11 25.5l-154 155l154 155\r\n  q11 10 11 25t-10.5 25.5zM888 760v0v0v-753v0h-752v0v753v0h752zM888 832h-752q-30 0 -51 -21t-21 -51v-753q0 -29 21 -50.5t51 -21.5h753q29 0 50.5 21.5t21.5 50.5v753q0 30 -21.5 51t-51.5 21v0z\"\r\n      />\r\n    </g>\r\n  </svg>\r\n)\r\n\r\nexport { PlusSquareO, MinusSquareO, CloseSquareO, EyeO }\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Spring, config, animated } from 'react-spring'\r\nimport * as Icons from './icons'\r\n\r\nconst styles = {\r\n  tree: {\r\n    position: 'relative',\r\n    padding: '4px 0px 0px 0px',\r\n    textOverflow: 'ellipsis',\r\n    whiteSpace: 'nowrap',\r\n    /* overflow: 'hidden', */\r\n    verticalAlign: 'middle',\r\n  },\r\n  toggle: {\r\n    width: '1em',\r\n    height: '1em',\r\n    marginRight: 10,\r\n    cursor: 'pointer',\r\n    verticalAlign: 'middle',\r\n  },\r\n  type: {\r\n    textTransform: 'uppercase',\r\n    fontFamily: 'monospace',\r\n    fontSize: '0.6em',\r\n    verticalAlign: 'middle',\r\n  },\r\n  contents: {\r\n    willChange: 'transform, opacity, height',\r\n    marginLeft: 6,\r\n    padding: '4px 0px 0px 14px',\r\n    borderLeft: '1px dashed rgba(255,255,255,0.4)',\r\n  },\r\n}\r\n\r\nconst Contents = ({ children, ...style }) => (\r\n  <animated.div style={{ ...style, ...styles.contents }}>\r\n    {children}\r\n  </animated.div>\r\n)\r\n\r\nexport default class Tree extends React.PureComponent {\r\n  static defaultProps = { open: false, visible: true, canHide: false }\r\n  static propTypes = {\r\n    open: PropTypes.bool,\r\n    visible: PropTypes.bool,\r\n    canHide: PropTypes.bool,\r\n    content: PropTypes.node,\r\n    springConfig: PropTypes.func,\r\n    onNodeClick: PropTypes.func,\r\n  }\r\n\r\n  constructor(props) {\r\n    super()\r\n    this.state = {\r\n      id: props.id, \r\n      open: props.open, \r\n      visible: props.visible, \r\n      immediate: props.toggleImmediate \r\n    }\r\n    this.onNodeClick = this.onNodeClick.bind(this)\r\n  }\r\n\r\n  toggle = () =>\r\n    this.props.children &&\r\n    this.setState(state => ({ open: !state.open }))\r\n\r\n  toggleVisibility = () => {\r\n    this.setState(\r\n      state => ({ visible: !state.visible, immediate: true }),\r\n      () => this.props.onClick && this.props.onClick(this.state.visible)\r\n    )\r\n  }\r\n\r\n  onNodeClick = () => {\r\n    this.props.onNodeClick && this.props.onNodeClick(this.state.id)\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(props) {\r\n    this.setState(state => {\r\n      return ['open', 'visible'].reduce(\r\n        (acc, val) =>\r\n          this.props[val] !== props[val] ? { ...acc, [val]: props[val] } : acc,\r\n        {}\r\n      )\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { open, visible, immediate } = this.state\r\n    const { children, content, type, style, canHide, springConfig } = this.props\r\n    const Icon =\r\n      Icons[`${children ? (open ? 'Minus' : 'Plus') : 'Close'}SquareO`]\r\n    return (\r\n      <div style={{ ...styles.tree, ...style }} className=\"treeview\">\r\n        <Icon\r\n          className=\"toggle\"\r\n          style={{ ...styles.toggle, opacity: children ? 1 : 0.3 }}\r\n          onClick={this.toggle}\r\n        />\r\n        <span style={{ ...styles.type, marginRight: type ? 10 : 0 }}>\r\n          {type}\r\n        </span>\r\n        {canHide && (\r\n          <Icons.EyeO\r\n            className=\"toggle\"\r\n            style={{ ...styles.toggle, opacity: visible ? 1 : 0.4 }}\r\n            onClick={this.toggleVisibility}\r\n          />\r\n        )}\r\n        <span style={{ verticalAlign: 'middle', cursor: 'pointer'  }} onClick={this.onNodeClick}>\r\n          {content}\r\n        </span>\r\n        <Spring\r\n          native\r\n          immediate={immediate}\r\n          config={{\r\n            ...config.default,\r\n            duration: 3000\r\n          }}\r\n          from={{ height: 0, opacity: 0, transform: 'translate3d(20px,0,0)' }}\r\n          to={{\r\n            height: open ? 'auto' : 0,\r\n            opacity: open ? 1 : 0,\r\n            transform: open ? 'translate3d(0px,0,0)' : 'translate3d(20px,0,0)',\r\n          }}\r\n          {...springConfig && springConfig(open)}\r\n          render={Contents}>\r\n          {children}\r\n        </Spring>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\n//import './App.css';\r\nimport Tree  from 'react-animated-tree'\r\n\r\nvar config = open => ({\r\n  from: { height: 0, opacity: 0, transform: 'translate3d(20px,0,0)' },\r\n  to: {\r\n    height: open ? 'auto' : 0,\r\n    opacity: open ? 1 : 0,\r\n    transform: open ? 'translate3d(0px,0,0)' : 'translate3d(20px,0,0)',\r\n  },\r\n})\r\n\r\nfunction App() {\r\n\r\n  function nodeClicked(e){\r\n    console.log(e)\r\n    \r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Tree content=\"Apple\" type=\"Fruit\" open canHide visible \r\n        onClick={console.log} springConfig={config} toggleImmediate={true} >\r\n        <Tree content=\"Contents\" onNodeClick={() => nodeClicked(\"somethingx\")} toggleImmediate={true}>\r\n          <Tree onNodeClick={() => nodeClicked(\"something\")} id={1343} content=\"Seeds\" />\r\n          <Tree content=\"Seeds\" />\r\n          <Tree content=\"Seeds\" />\r\n          <Tree content=\"Seeds\" />\r\n          <Tree content=\"Seeds\" />\r\n          <Tree content=\"Seeds\" />\r\n        </Tree>\r\n      </Tree>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}